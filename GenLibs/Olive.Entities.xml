<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Olive.Entities</name>
    </assembly>
    <members>
        <member name="T:Olive.Entities.ICriterion">
            <summary>
            Provides an abstraction for database query criteria.
            </summary>
        </member>
        <member name="T:Olive.Entities.IDataAccess">
            <summary>
            Provides direct data access to the underlying data source.
            </summary>
        </member>
        <member name="E:Olive.Entities.IDatabase.Updated">
            <summary>
            It's raised when any record is saved or deleted in the system.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDatabase.Save``1(``0)">
            <summary>
            Inserts or updates an object in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDatabase.Save(Olive.Entities.IEntity,Olive.Entities.SaveBehaviour)">
            <summary>
            Inserts or updates an object in the database.
            </summary>       
        </member>
        <member name="M:Olive.Entities.IDatabase.Save``1(System.Collections.Generic.List{``0})">
            <summary>
            Saves the specified records in the data repository.
            The operation will run in a Transaction.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(``0,System.Action{``0})">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(``0,System.Action{``0},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.Property = "Value"</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.someAsyncMethod()</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a list of given objects and persists the updated objects in database.
            It returns the updated instances.
            </summary>
            <param name="items">The objects to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.someAsyncMethod()</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.someAsyncMethod()</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.Update``1(``0,System.Func{``0,System.Threading.Tasks.Task},Olive.Entities.SaveBehaviour)">
            <summary>
            Runs an update command on a given object's clone and persists the updated object in database. It returns the updated instance.
            </summary>
            <param name="item">The object to be updated in database.</param>
            <param name="action">Update action. For example: o=>o.someAsyncMethod()</param>
        </member>
        <member name="M:Olive.Entities.IDatabase.BulkInsert(Olive.Entities.Entity[],System.Int32,System.Boolean)">
            <summary>
            Inserts the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDatabase.BulkUpdate(Olive.Entities.Entity[],System.Int32,System.Boolean)">
            <summary>
            Updates the specified objects in bulk. None of the object events will be triggered.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDatabaseQuery.CloneFor(System.Type)">
            <summary>
            Transforms this query to be usable for a specified data provider. 
            </summary> 
        </member>
        <member name="M:Olive.Entities.IDatabaseQuery`1.Aggregate``2(Olive.Entities.AggregateFunction,System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Gets a list of entities of the given type from the database with the specified type matching the specified criteria.
            If no criteria is specified, the count of all instances will be returned.
            </summary>        
        </member>
        <member name="M:Olive.Entities.IDataProvider.GetAssociationInclusionCriteria(Olive.Entities.IDatabaseQuery,System.Reflection.PropertyInfo)">
            <summary>
            Returns a direct database criterion used to eager load associated objects.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDataProvider.ReadManyToManyRelation(Olive.Entities.IEntity,System.String)">
            <summary>
            Reads the many to many relation and returns the IDs of the associated objects.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDataProviderFactory.GetProvider(System.Type)">
            <summary>
            Creates a data provider for the specified type.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDataProviderFactory.SupportsPolymorphism">
            <summary>
            Determines whether this data provider factory handles interface data queries.
            </summary>
        </member>
        <member name="P:Olive.Entities.IDataProviderFactory.ConnectionString">
            <summary>
            The default connection string used for its data providers.
            </summary>
        </member>
        <member name="M:Olive.Entities.IDataProviderFactory.GetAccess">
            <summary>
            Gets a data access instance used for executing database commands against its data source.
            </summary>
        </member>
        <member name="T:Olive.Entities.IEntity">
            <summary>
            Represents an M# Entity.
            </summary>
        </member>
        <member name="P:Olive.Entities.IEntity.IsNew">
            <summary>
            Determines whether this object has just been instantiated as a new object, or represent an already persisted instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.IEntity.Validate">
            <summary>
            Validates this instance and throws ValidationException if necessary.
            </summary>
        </member>
        <member name="M:Olive.Entities.IEntity.GetId">
            <summary>
            Gets the id of this entity.
            </summary>        
        </member>
        <member name="M:Olive.Entities.IEntity.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Olive.Entities.IEntity.InvalidateCachedReferences">
            <summary>
            Invalidates all its cached referencers.
            </summary>
        </member>
        <member name="T:Olive.Entities.IEntity`1">
            <summary>
            A persistent object in the application.
            </summary>
        </member>
        <member name="P:Olive.Entities.IEntity`1.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="T:Olive.Entities.AutoNumberAttribute">
            <summary>
            When applied to a property, indicates that such property is AutoNumber (or Identity in SQL Server).
            </summary>
        </member>
        <member name="M:Olive.Entities.AutoNumberAttribute.IsAutoNumber(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is auto number.
            </summary>
        </member>
        <member name="T:Olive.Entities.BridgColumnAttribute">
            <summary>
            When applied to a property, indicates that such property is AutoNumber (or Identity in SQL Server).
            </summary>
        </member>
        <member name="P:Olive.Entities.BridgColumnAttribute.ColumnName">
            <summary>
            Determines if a given property is auto number.
            </summary>
                
        </member>
        <member name="T:Olive.Entities.BridgTableAttribute">
            <summary>
            When applied to a property, indicates that such property is AutoNumber (or Identity in SQL Server).
            </summary>
        </member>
        <member name="P:Olive.Entities.BridgTableAttribute.TableName">
            <summary>
            Determines if a given property is auto number.
            </summary>
            
        </member>
        <member name="T:Olive.Entities.CacheObjectsAttribute">
            <summary>
            Specifies if a type is cacheable.
            </summary>
        </member>
        <member name="M:Olive.Entities.CacheObjectsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new CacheObjectsAttribute instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.CacheObjectsAttribute.IsEnabled(System.Type)">
            <summary>
            Determines if caching is enabled for a given type.
            </summary>
        </member>
        <member name="T:Olive.Entities.CalculatedAttribute">
            <summary>
            When applied to a property, indicates that such property does not exist in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.CalculatedAttribute.IsCalculated(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is calculated.
            </summary>
        </member>
        <member name="M:Olive.Entities.CustomDataConverterAttribute.#ctor(System.String)">
            <summary>
            Provide a custom converter from database data type the the property data type.
            </summary>
            <param name="className">It should be the full name of the type.</param>
        </member>
        <member name="M:Olive.Entities.EnumDataConverterAttribute.#ctor(System.String)">
            <summary>
            Provide a custom converter from database data type the the property data type.
            </summary>
            <param name="enumName">It should be the full name of the type.</param>
        </member>
        <member name="T:Olive.Entities.DateOnlyAttribute">
            <summary>
            When applied to a property of type DateTime or Nullable[DateTime] it specifies that values are for Date only, 
            and the time part is meant to be disregarded.
            </summary>
        </member>
        <member name="T:Olive.Entities.HasDataAccessClass">
            <summary>
            When applied to a class field or property, it marks it as the default string representation of that class.
            This is intended to be used by Code generators when generating a ToString() method, to know what to return.
            </summary>
        </member>
        <member name="T:Olive.Entities.ImmutableAttribute">
            <summary>
            When applied to a property, indicates that such property's value will never change and therefore it can be used for caching.
            </summary>
        </member>
        <member name="T:Olive.Entities.InverseOfAttribute">
            <summary>
            When applied to a property, indicates the name property on the child side of the relationship.
            </summary>
        </member>
        <member name="T:Olive.Entities.LazyLoadAttribute">
            <summary>
            When applied to a class field or property, it marks it as the default string representation of that class.
            This is intended to be used by Code generators when generating a ToString() method, to know what to return.
            </summary>
        </member>
        <member name="T:Olive.Entities.LogEventsAttribute">
            <summary>
            When applied to a class, indicates whether data access events should be logged for instances of that type.
            </summary>
        </member>
        <member name="M:Olive.Entities.LogEventsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new LogEventsAttribute instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.LogEventsAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new LogEventsAttribute instance.
            </summary>
        </member>
        <member name="P:Olive.Entities.ManyToManyAttribute.Lazy">
            <summary>
            Gets or sets the Lazy of this ManyToManyAttribute.
            </summary>
        </member>
        <member name="M:Olive.Entities.ManyToManyAttribute.GetManyToManyProperties(System.Type)">
            <summary>
            Gets a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="M:Olive.Entities.ManyToManyAttribute.GetManyToManyProperties(System.Type,System.Nullable{System.Boolean})">
            <summary>
            Gets a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="M:Olive.Entities.ManyToManyAttribute.FindManyToManyProperties(System.Type,System.Nullable{System.Boolean})">
            <summary>
            Returns a list of types that depend on a given entity.
            </summary>
        </member>
        <member name="T:Olive.Entities.NeedsCastingDatabaseValueAttribute">
            <summary>
            When applied to a class field or property, it marks it as the default string representation of that class.
            This is intended to be used by Code generators when generating a ToString() method, to know what to return.
            </summary>
        </member>
        <member name="T:Olive.Entities.NotAssociationAttribute">
            <summary>
            When applied to a property, indicates that such property is not an association. 
            It uses when you need a property ending with `Id` but it is not an entity.
            </summary>
        </member>
        <member name="M:Olive.Entities.NotAssociationAttribute.Marked(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is mark by this attribute.
            </summary>
        </member>
        <member name="T:Olive.Entities.PersistentAttribute">
            <summary>
            When applied to a class, defines its Application data accessor type.
            </summary>
        </member>
        <member name="T:Olive.Entities.PrimaryKeyAttribute">
            <summary>
            When applied to a property, it marks it as the primary key of that class.
            This is intended to be used by object relational mapping (ORM) tools.
            </summary>
        </member>
        <member name="M:Olive.Entities.PrimaryKeyAttribute.IsPrimaryKey(System.Reflection.PropertyInfo)">
            <summary>
            Determines if a given property is primary key.
            </summary>
        </member>
        <member name="T:Olive.Entities.ReferencedTypeAttribute">
            <summary>
            When applied to a property, indicates that such property is AutoNumber (or Identity in SQL Server).
            </summary>
        </member>
        <member name="T:Olive.Entities.SchemaAttribute">
            <summary>
            By default the table name of an entities is deemed to be named as the plural form of the type name.
            If it's specified as anything different, then this attribute will be added.
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.IsEnabled(System.Type)">
            <summary>
            Determines if soft delete is enabled for a given type.
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.IsEnabled(System.Type,System.Boolean)">
            <summary>
            Determines if soft delete is enabled for a given type.
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.MarkDeleted(Olive.Entities.Entity)">
            <summary>
            Marks a specified object as soft deleted. 
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.UnMark(Olive.Entities.Entity)">
            <summary>
            Unmarks a specified object as soft deleted. 
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.IsMarked(Olive.Entities.Entity)">
            <summary>
            Determines if a specified object is marked as soft deleted. 
            </summary>
        </member>
        <member name="T:Olive.Entities.SoftDeleteAttribute.Context">
            <summary>
            Provides support for bypassing softdelete rule.
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.Context.#ctor(System.Boolean)">
            <summary>
            Creates a new Context instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.SoftDeleteAttribute.Context.ShouldByPassSoftDelete">
            <summary>
            Determines if SoftDelete check should the bypassed in the current context.
            </summary>
        </member>
        <member name="T:Olive.Entities.TableNameAttribute">
            <summary>
            By default the table name of an entities is deemed to be named as the plural form of the type name.
            If it's specified as anything different, then this attribute will be added.
            </summary>
        </member>
        <member name="T:Olive.Entities.ToStringAttribute">
            <summary>
            When applied to a class field or property, it marks it as the default string representation of that class.
            This is intended to be used by Code generators when generating a ToString() method, to know what to return.
            </summary>
        </member>
        <member name="T:Olive.Entities.Blob">
            <summary> 
            Provides an utility for handling Binary property types.
            </summary>
        </member>
        <member name="F:Olive.Entities.Blob.SuppressPersistence">
            <summary>
            In Test projects particularly, having files save themselves on the disk can waste space.
            To prevent that, apply this setting in the config file.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Blob"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.#ctor(System.String)">
            <summary>
            Initializes a new Document instance with the specified file name.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new Blob instance with the specified data and file name.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new Blob instance, for the specified file on disk.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.GetFileDataAsync">
            <summary>
            Gets the data of this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Empty">
            <summary>
            Gets an empty blob object.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Unchanged">
            <summary>
            Gets an empty blob object.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.ToString">
            <summary>
            Gets the Url of this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.GetContentTextAsync">
            <summary>
            Gets the content
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Url">
            <summary>
            Gets a Url to this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.UrlOr(System.String)">
            <summary>
            Returns the Url of this blob, or the provided default Url if this is Empty.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.GetCacheSafeUrl">
            <summary>
            Gets a cache safe URL to this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.IsEmpty">
            <summary>
            Determines whether this is an empty blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.HasValue">
            <summary>
            Determines whether this blob has any content.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.CloneAsync">
            <summary>
            Creates a clone of this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Clone">
            <summary>
            Creates a clone of this blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Attach(Olive.Entities.Entity,System.String)">
            <summary>
            Attaches this Blob to a specific record's file property.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Detach">
            <summary>
            Detaches this Blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Delete(Olive.AwaitableEvent{System.ComponentModel.CancelEventArgs})">
            <summary>Deletes this blob from the storage provider.</summary>
        </member>
        <member name="M:Olive.Entities.Blob.Save">
            <summary>Saves this file to the storage provider.</summary>
        </member>
        <member name="M:Olive.Entities.Blob.GetMimeType">
            <summary>
            Gets the mime type based on the file extension.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.IsMedia">
            <summary>Determines if this blob's file extension is for audio or video.</summary>
        </member>
        <member name="M:Olive.Entities.Blob.FromReference(System.String)">
            <summary>
             This will return the blob object linked to the correct entity.
            </summary>
            <param name="reference">Expected format: Type/Id/Property.</param>
        </member>
        <member name="M:Olive.Entities.Blob.GetUnsafeExtensions">
            <summary>
            Gets a list of unsafe file extensions.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.HasUnsafeExtension">
            <summary>
            Determines whether the extension of this file is potentially unsafe.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.Or(Olive.Entities.Blob)">
            <summary>
            Gets this blob if it has a value, otherwise another specified blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.CompareTo(Olive.Entities.Blob)">
            <summary>
            Compares this blob versus a specified other blob.
            </summary>
        </member>
        <member name="M:Olive.Entities.Blob.CompareTo(System.Object)">
            <summary>
            Compares this blob versus a specified other blob.
            </summary>
        </member>
        <member name="F:Olive.Entities.BlobStorageProviderFactory.Providers">
            <summary>
            This is to be configured in Global.asax if a different provider is needed for specific files.
            Example: Olive.Entities.BlobStorageProviderFactory.Add("Customer.Logo", new MySpecialStorageProvider);
            </summary>
        </member>
        <member name="M:Olive.Entities.BlobStorageProviderFactory.GetProvider(System.String)">
            <summary>
            In the format: {type}.{property} e.g. Customer.Logo.
            </summary>
        </member>
        <member name="T:Olive.Entities.ClonedDocument">
            <summary>
            Created from a persisted Blob to prevent unnecessary file loading when it's not actually changed.
            So that if an entity is being updated, while its original file is not changed, we don't do an unnecessary file operation.
            </summary>
        </member>
        <member name="P:Olive.Entities.DiskBlobStorageProvider.Root">
            <summary>
            Gets the physical path root.
            </summary>
        </member>
        <member name="T:Olive.Entities.CachedReference`1">
            <summary> 
            Provides immediate access to retrieved entities. It is aware of deletes and updates.
            </summary>
        </member>
        <member name="T:Olive.Entities.CachedReference`2">
            <summary>
            Provides immediate access to retrieved entities. It is aware of deletes and updates.
            </summary>
        </member>
        <member name="M:Olive.Entities.CachedReference`2.Get(System.Nullable{`0})">
            <summary>
            Gets the entity record from a specified database call expression.
            The first time it is loaded, all future calls will be immediately served.
            </summary>
        </member>
        <member name="M:Olive.Entities.CachedReference`2.GetOrDefault(System.Nullable{`0})">
            <summary>
            Gets the entity record from a specified database call expression.
            The first time it is loaded, all future calls will be immediately served.
            </summary>
        </member>
        <member name="M:Olive.Entities.CachedReference`2.GetAsync(System.Nullable{`0})">
            <summary>
            Gets the entity record from a specified database call expression.
            The first time it is loaded, all future calls will be immediately served.
            </summary>
        </member>
        <member name="M:Olive.Entities.CachedReference`2.GetOrDefaultAsync(System.Nullable{`0})">
            <summary>
            Gets the entity record from a specified database call expression, if it exists, or null.
            The first time it is loaded, all future calls will be immediately served.
            </summary>
        </member>
        <member name="T:Olive.Entities.Criterion">
            <summary>
            A basic implementation of a database query criterion.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,Olive.Entities.FilterFunction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,Olive.Entities.FilterFunction,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,Olive.Entities.FilterFunction,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,Olive.Entities.FilterFunction,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.Criterion"/> class.
            </summary>
        </member>
        <member name="P:Olive.Entities.Criterion.PropertyName">
            <summary>
            Gets or sets the PropertyName of this Condition.
            </summary>
        </member>
        <member name="P:Olive.Entities.Criterion.SqlCondition">
            <summary>
            Gets or sets the SqlCondition of this Condition.
            </summary>
        </member>
        <member name="P:Olive.Entities.Criterion.FilterFunction">
            <summary>
            Gets or sets the Filter Option of this Condition.
            </summary>
        </member>
        <member name="P:Olive.Entities.Criterion.Value">
            <summary>
            Gets or sets the Value of this Condition.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.GetSerializedValue">
            <summary>
            Gets a text representation of the value.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.Parse(System.String)">
            <summary>
            Parses the specified condition string.
            </summary>
        </member>
        <member name="M:Olive.Entities.Criterion.GetFilterFunction(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the filter option for a specified Lambda expression node type.
            </summary>
        </member>
        <member name="T:Olive.Entities.DirectDatabaseCriterion">
            <summary>
            Enables adding a direct SQL WHERE criteria to the database query.
            </summary>
        </member>
        <member name="F:Olive.Entities.DirectDatabaseCriterion.Parameters">
            <summary>
            Gets the parameters used in the specified custom SQL criteria.
            </summary>
        </member>
        <member name="P:Olive.Entities.DirectDatabaseCriterion.SqlCriteria">
            <summary>
            Gets or sets the SQL criteria.
            </summary>
        </member>
        <member name="P:Olive.Entities.DirectDatabaseCriterion.Value">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="P:Olive.Entities.DirectDatabaseCriterion.IsCacheSafe">
            <summary>
            Specifies whether this criteria is compatible with normal caching.
            </summary>
        </member>
        <member name="P:Olive.Entities.DirectDatabaseCriterion.FilterFunction">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="M:Olive.Entities.DirectDatabaseCriterion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.DirectDatabaseCriterion" /> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.DirectDatabaseCriterion.#ctor(System.String,System.Tuple{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.DirectDatabaseCriterion" /> class.
            </summary>
            <param name="parameters">Item1 = Parameter name (without the @ character). Item2 = parameter value.</param>
        </member>
        <member name="M:Olive.Entities.DirectDatabaseCriterion.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.DirectDatabaseCriterion" /> class.
            </summary>
        </member>
        <member name="M:Olive.Entities.DirectDatabaseCriterion.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Olive.Entities.DirectDatabaseCriterion" /> class.
            </summary>
            <param name="parameters">Example: new {Parameter1 = SomeValue(), Parameter2 = AnotherValue()}</param>
        </member>
        <member name="M:Olive.Entities.DirectDatabaseCriterion.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="T:Olive.Entities.FilterFunction">
            <summary>
            Provides options for filter functions.
            </summary>
        </member>
        <member name="M:Olive.Entities.FilterFunctionServices.GetDatabaseOperator(Olive.Entities.FilterFunction)">
            <summary>
            Gets the database operator equivalent for this filter option.
            </summary>
        </member>
        <member name="M:Olive.Entities.FullTextSearchQueryOption.#ctor">
            <summary>
            Creates a new FullTextIndexQueryOption instance.
            </summary>
        </member>
        <member name="P:Olive.Entities.FullTextSearchQueryOption.Keyword">
            <summary>
            Gets or sets the Keywords of this FullTextIndexQueryOption.
            </summary>
        </member>
        <member name="P:Olive.Entities.FullTextSearchQueryOption.Properties">
            <summary>
            Gets or sets the Properties of this FullTextIndexQueryOption.
            </summary>
        </member>
        <member name="M:Olive.Entities.PagingQueryOption.#ctor">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.PagingQueryOption.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="P:Olive.Entities.PagingQueryOption.OrderBy">
            <summary>
            The direct SQL sort expression. E.g: MyColumn DESC, Something 
            </summary>
        </member>
        <member name="M:Olive.Entities.QueryOption.FullTextSearch(System.String,System.String[])">
            <summary>
            Creates a FullTextSearch option for the search query.
            </summary>
        </member>
        <member name="M:Olive.Entities.RangeQueryOption.#ctor">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="P:Olive.Entities.SortQueryOption.Property">
            <summary>
            Gets or sets the Property of this SortQueryOption.
            </summary>
        </member>
        <member name="P:Olive.Entities.SortQueryOption.Descending">
            <summary>
            Gets or sets the Descending of this SortQueryOption.
            </summary>
        </member>
        <member name="M:Olive.Entities.TakeTopQueryOption.#ctor(System.Int32)">
            <summary>
            Creates a new ResultSetSizeQueryOption instance.
            </summary>
        </member>
        <member name="P:Olive.Entities.TakeTopQueryOption.Number">
            <summary>
            Gets or sets the Number of this ResultSetSizeQueryOption.
            </summary>
        </member>
        <member name="T:Olive.Entities.EntityFinder">
            <summary>
            Finds an entity with unknown type from its given id.
            </summary>
        </member>
        <member name="M:Olive.Entities.EntityFinder.GetEntityType(System.String)">
            <summary>
            Gets the runtime type from the currently loaded assemblies.
            </summary>
            <param name="typeFullName">The type name (including namespace, but excluding assembly).</param>
        </member>
        <member name="T:Olive.Entities.Entity">
            <summary>Entity, a persistent object in the application.</summary>
        </member>
        <member name="M:Olive.Entities.Entity.#ctor">
            <summary>
            Base constructor (called implicitly in all typed entity classes) to initialize an object.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.GetId">
            <summary>
            Gets the id of this entity.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.InvalidateCachedReferences">
            <summary>
            Invalidates its cached references.
            </summary>
        </member>
        <member name="P:Olive.Entities.Entity.IsNew">
            <summary>
            Determines whether this is a newly created instace. This value will be True for new objects, and False for anything loaded from the database.
            </summary>
        </member>
        <member name="P:Olive.Entities.Entity.IsMarkedSoftDeleted">
            <summary>
            Determines whether this instance is "soft-deleted".
            </summary>
        </member>
        <member name="P:Olive.Entities.Entity.IsStale">
            <summary>
            Determines whether this object is already cloned and updated in the database without this instance being updated.
            </summary>                
        </member>
        <member name="F:Olive.Entities.Entity.UpdatedClone">
            <summary>
            Gets or sets the clone of this object which was updated in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.Initialize">
            <summary>
            Initializes this instance.
            This can be overridden in the business entity types to provide "construction" logic.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.GetPrimitiveProperties">
            <summary>
            Gets the primitive properties of this tye.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.ExtractPrimitiveProperties(System.Type)">
            <summary>
            Extracts the primitive properties of a specified type.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.ToString(System.String)">
            <summary>
            Returns a string that contains all primitive properties of this instance.
            This should be used normally in "full text search".
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.ValidateProperties">
            <summary>
            Validates the data for the properties of the current instance.
            It throws a ValidationException if an error is detected
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.Validate">
            <summary>
            Validates this instance to ensure it can be saved in a data repository.
            If this finds an issue, it throws a ValidationException for that.        
            This calls ValidateProperties(). Override this method to provide custom validation logic in a type.
            </summary>
        </member>
        <member name="E:Olive.Entities.Entity.Loaded">
            <summary>
            This even is raised just after this instance is loaded from the database.
            </summary>        
        </member>
        <member name="E:Olive.Entities.Entity.Saving">
            <summary>
            This event is raised just before this instance is saved in the data repository.
            </summary>
        </member>
        <member name="E:Olive.Entities.Entity.Validating">
            <summary>
            This is raised just before the object is being Validated.
            It will automatically be called in Database.Save() method before calling the Validate() method.
            Use this to do any last-minute object modifications, such as initializing complex values.
            </summary>
        </member>
        <member name="E:Olive.Entities.Entity.Saved">
            <summary>
            This event is raised after this instance is saved in the database.
            </summary>
        </member>
        <member name="E:Olive.Entities.Entity.Deleting">
            <summary>
            This event is raised just before this instance is deleted from the database.
            </summary>
        </member>
        <member name="E:Olive.Entities.Entity.Deleted">
            <summary>
            This event is raised just after this instance is deleted from the database.
            </summary> 
        </member>
        <member name="M:Olive.Entities.Entity.Clone">
            <summary>
            Creates a shallow copy of this object.
            If you need to update an instance loaded from the database, you must create a Clone of it before applying any changes.
            Otherwise you will be editing the "live" instance from the cache, that is used by all other threads!
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.        
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.Equals(Olive.Entities.Entity)">
            <summary>Determines whether the specified object is equal to this instance. </summary>
        </member>
        <member name="M:Olive.Entities.Entity.op_Equality(Olive.Entities.Entity,System.Object)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name = "other">An object to compare with this instance.</param>
        </member>
        <member name="P:Olive.Entities.Entity.Database">
            <summary>
            Gets the currently injected Datbase service.
            </summary>
        </member>
        <member name="P:Olive.Entities.Entity`1.ID">
            <summary>Gets or sets the ID of this object.</summary>
        </member>
        <member name="P:Olive.Entities.Entity`1.OriginalId">
            <summary>
            Gets the original id of this type as it was in the database.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Olive.Entities.Entity`1.Equals(Olive.Entities.Entity)">
            <summary>
            Determines whether this instance is equal to another specified instance.
            </summary>
        </member>
        <member name="M:Olive.Entities.Entity`1.GetId">
            <summary>
            Gets the ID of this object.
            </summary>
        </member>
        <member name="M:Olive.Entities.EntityStateExtensions.IsImmutable(Olive.Entities.EntityServices,Olive.Entities.IEntity)">
            <summary>
            Determines whether the specified record is immutable, or closed for changes.        
            An object marked as immutable is shared in the application cache. Therefore it must not be changed.        
            </summary>
        </member>
        <member name="M:Olive.Entities.EntityStateExtensions.MarkImmutable(Olive.Entities.EntityServices,Olive.Entities.IEntity)">
            <summary>
            Marks the specified object as immutable.
            </summary>
        </member>
        <member name="M:Olive.Entities.EntityStateExtensions.SetSaved(Olive.Entities.EntityServices,Olive.Entities.IEntity)">
            <summary>
            Sets the state of an entity instance to saved.
            </summary>
        </member>
        <member name="M:Olive.Entities.EntityStateExtensions.CloneAsNew``1(Olive.Entities.EntityServices,``0,System.Action{``0})">
            <summary>
            Creates a new clone of an entity. This will work in a polymorphic way.
            </summary>        
        </member>
        <member name="E:Olive.Entities.GlobalEntityEvents.InstanceSaving">
            <summary>
            This event is raised for the whole Entity type before "any" object is saved in the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:Olive.Entities.GlobalEntityEvents.InstanceSaved">
            <summary>
            This event is raised for the whole Entity type after "any" object is saved in the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:Olive.Entities.GlobalEntityEvents.InstanceDeleting">
            <summary>
            This event is raised for the whole Entity type before "any" object is deleted from the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="E:Olive.Entities.GlobalEntityEvents.InstanceValidating">
            <summary>
            This event is raised for the whole Entity type before "any" object is validated.
            You can handle this to provide global functionality/event handling scenarios.
            This will be called as the first line of the base Entity's OnValidating method.
            </summary>
        </member>
        <member name="E:Olive.Entities.GlobalEntityEvents.InstanceDeleted">
            <summary>
            This event is raised for the whole Entity type after "any" object is deleted from the database.
            You can handle this to provide global functionality/event handling scenarios.
            </summary>
        </member>
        <member name="M:Olive.Entities.BlobExtension.IsImage(Olive.Entities.Blob)">
            <summary>
            Determines whether this blob is an image.
            </summary>
        </member>
        <member name="T:Olive.Entities.GuidEntity">
            <summary>Represents a base Entity with ID of type Guid.</summary>
        </member>
        <member name="P:Olive.Entities.GuidEntity.ID">
            <summary>
            Gets a unique Identifier for this instance. In the database, this will be the primary key of this object.
            </summary>
        </member>
        <member name="M:Olive.Entities.GuidEntity.Clone">
            <summary>
            Creates a shallow copy of this object.
            If you need to update an instance loaded from the database, you must create a Clone of it before applying any changes.
            Otherwise you will be editing the "live" instance from the cache, that is used by all other threads!
            </summary>
        </member>
        <member name="P:Olive.Entities.IntEntity.ID">
            <summary>
            Gets a unique Identifier for this instance. In the database, 
            this will be the primary key of this object.
            </summary>
        </member>
        <member name="T:Olive.Entities.ISortable">
            <summary>
            Represents a sortable entity type.
            </summary>
        </member>
        <member name="T:Olive.Entities.Sorter">
            <summary>
            Provides Sorting services for all entities.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveBefore(Olive.Entities.ISortable,Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves this item before a specified other item. If null is specified, it will be moved to the end of its siblings.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveAfter(Olive.Entities.ISortable,Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves this item after a specified other item. If null is specified, it will be moved to the beginning of its siblings.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveUp(Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves an item up among its siblings. Returns False if the item is already first in the list, otherwise true.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveFirst(Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves an item up to first among its siblings. Returns False if the item is already first in the list, otherwise true.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveLast(Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves an item up to last among its siblings. Always returns true.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.MoveDown(Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Moves an item down among its siblings. Returns False if the item is already last in the list, otherwise true.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.Swap(Olive.Entities.ISortable,Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Swaps the order of two specified items.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.JustifyOrders(Olive.Entities.ISortable,Olive.Entities.SaveBehaviour)">
            <summary>
            Justifies the order of a specified item and its siblings. 
            The value of the "Order" property in those objects will be 10, 20, 30, ...
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.FindSiblings(Olive.Entities.ISortable)">
            <summary>
            Discovers the siblings of the specified sortable object.
            </summary>
        </member>
        <member name="M:Olive.Entities.Sorter.GetNewOrder(Olive.Entities.ISortable)">
            <summary>
            Gets the Next order for an ISortable entity.
            The result will be 10 plus the largest order of its siblings.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.IsAnyOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is in a specified list of specified items.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.IsNoneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is none of a list of specified items.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.CloneAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones all items of this collection.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetFullIdentifierString(Olive.Entities.IEntity)">
            <summary>
            Gets the id of this entity.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.ValidateAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Validates all entities in this collection.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.OnlyWhen``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Returns this Entity only if the given predicate evaluates to true and this is not null.
            </summary>        
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.IDs``1(System.Collections.Generic.IEnumerable{Olive.Entities.IEntity{``0}})">
            <summary>
            Returns all entity Guid IDs for this collection.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.ToFilterFunction(System.Linq.Expressions.ExpressionType,System.Boolean)">
            <summary>
            Get the equivalent of the given expression type.
            </summary>
            <param name="flipped">Pass true to get less instead of more and vice versa.</param>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.To``1(System.Nullable{System.Guid})">
            <summary>
            This will use Database.Get() to load the specified entity type with this ID.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.To``1(System.Guid)">
            <summary>
            This will use Database.Get() to load the specified entity type with this ID.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetFullPath(Olive.Entities.IHierarchy)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by " > ".
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.IsRootNode(Olive.Entities.IHierarchy)">
            <summary>
            Gets whether this node is a root hierarchy node.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetFullPath(Olive.Entities.IHierarchy,System.String)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by a specified seperation string.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.WithAllChildren(Olive.Entities.IHierarchy)">
            <summary>
            Gets this node as well as all its children hierarchy.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetAllChildren(Olive.Entities.IHierarchy)">
            <summary>
            Gets all children hierarchy of this node.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.WithAllParents(Olive.Entities.IHierarchy)">
            <summary>
            Gets this node as well as all its parents hierarchy.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetAllParents(Olive.Entities.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.WithAllParents``1(``0)">
            <summary>
            Gets this node as well as all its parents hierarchy.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetAllParents``1(Olive.Entities.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetRootEntityType(System.Type)">
            <summary>
            Gets the root entity type of this type.
            If this type inherits directly from Entity&lt;T&gt; then it will be returned, otherwise its parent...
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.DownloadBlob(System.Uri,System.String,System.Int32)">
            <summary>
            Downloads the data in this URL.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.GetSqlSafeValue(System.DateTime)">
            <summary>
            Returns a MS T-SQL-safe DateTime value for use in queries (i.e. prevents date values earlier than 1/1/1753).
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.ExecuteReader(Olive.Entities.IDataAccess,System.String,System.Object[])">
            <summary>
            Executes the specified command text against the database connection of the context and builds an IDataReader.
            The command type will be `CommandType.Text`.
            Make sure you close the data reader after finishing the work.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.ExecuteScalar(Olive.Entities.IDataAccess,System.String,System.Object[])">
            <summary>
            Executes the specified command text against the database connection of the context and returns the single value.
            The command type will be `CommandType.Text`.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.ExecuteNonQuery(Olive.Entities.IDataAccess,System.String,System.Object[])">
            <summary>
            Executes the specified command text as nonquery.
            The command type will be `CommandType.Text`.
            </summary>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.Select``1(System.Threading.Tasks.Task{System.Data.IDataReader},System.Func{System.Data.IDataReader,``0})">
            <summary>
            Maps each record in the reader to an object using the provided mapper fuction.
            </summary>
            <typeparam name="T">Result elemets type</typeparam>
            <param name="mapper">Mapper fuction to create each item. Is should not call the `reader.read()`</param>
        </member>
        <member name="M:Olive.OliveEntitiesExtensions.SelectAsync``1(System.Threading.Tasks.Task{System.Data.IDataReader},System.Func{System.Data.IDataReader,System.Threading.Tasks.Task{``0}})">
            <summary>
            Maps each record in the reader to an object using the provided mapper fuction.
            </summary>
            <typeparam name="T">Result elemets type</typeparam>
            <param name="mapper">Mapper fuction to create each item. Is should not call the `reader.read()`</param>
        </member>
    </members>
</doc>
